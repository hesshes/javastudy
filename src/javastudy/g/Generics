<Generics> 
- 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법
- 객체별로 다른 타입의 자료가 저장될 수 있도록 한다.
- 아래 예제에서 <type>으로 되어 있는 부분이 제네릭이다. 괄호안에 타입을 지정하면 된다.
ex1)  ArrayList<type> list = new ArraysList<type>();  
<Generic 사용 주의 사항>
- 제네릭 타입의 객체는 생성이 불가. 즉, new 연산자 뒤에 제네릭 타입의 파라미터가 올 수 없다.



<제네릭 타입 매개변수>
- <> 꺽쇠 괄호 키워드를 다이아몬드 연산자라고 한다.
- 꺽쇠 괄호 안에 식별자 기호를 지정함으로써 파라미터화 할 수 있다.
- 매개변수를 받아 사용하는 것과 비슷하여 제네릭의 타입 매개변수 / 타입 변수 라고 부른다.
ex2)  List<T> 타입 매개변수
      List<String> stringList = new ArrayList<String>(); 매개변수화된 타입
      
 <타입 파라미터 정의>
 - 제네릭을 이용한 클래스나 메소드 설계할 때 사용된다.
 ex) GFruitBox.java 참조
 
 <타입 파라미터 생략>
 - 제네릭 객체를 사용하는 문법 형태를 보면 양쪽 두 군데에 꺽쇠 괄호 제네릭 타임을 지정함을
 볼 수 있다.
 - 맨 앞에서 클래스명과 함께 타입을 지정해 주었는데 굳이 생성자까지 제네릭을 지정해 줄 필요
 가 없다.(중복)
 ex) FuritBox<Apple> intBox = new FruitBox<>();
 
 <타입 파라미터 할당 가능 타입>
 - 제네릭에서 할당 받을 수 있는 타입은 Reference 타입 뿐이다.
 - 즉, int형이나 double형 같은 자바 원시 타입은 제네릭 파라미터로 넘길 수 없다.
 - 제네릭 타입 파라미터에 클래스가 타입으로 온다는 것은 클래스끼리 상속을 통해 관계를 맺는
 객체 지향 프로그래밍의 다형성 원리가 그대로 적용이 된다.
 즉, 업캐스팅을 통해 그 자식 객체도 할당이 된다는 것을 의미한다.
 
 <복수 타입 파라미터>
 - 제네릭을 반드시 한개만 사용하라는 법은 없다.
 - 타입 지정이 여러개가 필요할 경우 2개, 3개 얼마든지 만들 수 있다.
 ex) GFruitBox2.java 참조
 
 <중첩 타입 파라미터>
 - 제네릭 객체를 제네릭 타입 파라미터로 받는 형식도 표현 할 수 있다.
 ex) ArrayList<LinkedList<String>> list = new ArrayList<LinkedList<String>>();
 
 
 <제네릭 메서드>
 - 메서드의 선언부에 <T> 가 선언된 메서드
 ex) GFruitBox.java 메서드 부분 참고
 
 